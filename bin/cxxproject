#!/usr/bin/env bash

projectname=myapp
cxx_compiler=clang++
cxx_standart=20

while getopts "qp:c:s:" opt; do
    case $opt in
        q) qtproject=1
            ;;
        p) projectname="$OPTARG"
            ;;
        c) cxx_compiler="$OPTARG"
            ;;
        s) cxx_standart="$OPTARG"
            ;;
        *) echo "Usage: $(basename "$0") [-q] [-p projectname] [-c compiler] [-s standart]"
            exit 1
            ;;
        esac
done

if [ -n "$qtproject" ]; then
    qtsetup="
find_package(Qt6 REQUIRED COMPONENTS Widgets)
qt_standard_project_setup()
"

    qtafter="
target_link_libraries($projectname PRIVATE Qt6::Widgets)

set_target_properties($projectname PROPERTIES
    WIN32_EXECUTABLE ON
    MACOSX_BUNDLE ON
)"
fi

mkdir -p build src include

if [ -n "$qtproject" ]; then
    cat > src/main.cpp << EOF
#include <QApplication>

auto main(int argc, char** argv) -> int
{
    QApplication app(argc, argv);

    return app.exec();
}
EOF
else
    cat > src/main.cpp << EOF
auto main() -> int
{
}
EOF
fi

cat > CMakeLists.txt << EOF
cmake_minimum_required(VERSION 3.17)

project($projectname CXX)
set(CMAKE_CXX_STANDARD $cxx_standart)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wpedantic -Wextra -Wfloat-conversion -Wfloat-equal -Wvla")
$qtsetup
add_executable(\${PROJECT_NAME}
    src/main.cpp
)

target_include_directories(\${PROJECT_NAME} PRIVATE include)
$qtafter
EOF

cat > .clang-format << EOF
---
Language: Cpp
BasedOnStyle: Microsoft
AccessModifierOffset: -4
AlignArrayOfStructures: Left
AllowShortBlocksOnASingleLine: Empty
AllowShortFunctionsOnASingleLine: Empty
AlwaysBreakTemplateDeclarations: Yes
BreakBeforeBinaryOperators: NonAssignment
PointerAlignment: Left
QualifierAlignment: Left
SeparateDefinitionBlocks: Always
SpaceAfterCStyleCast: true
SpaceAfterTemplateKeyword: false
EOF

cd build || exit 1
cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_COMPILER="$cxx_compiler"
cd .. || exit 1
ln -s build/compile_commands.json compile_commands.json
